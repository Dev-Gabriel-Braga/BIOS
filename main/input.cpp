// -------------------------------------------------------------------------
// input.cpp - input of optimization data.
// -------------------------------------------------------------------------
// Copyright (c) 2021 LMCV/UFC
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright 
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright 
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
// PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
// Created:      21-Apr-2012    Iuri Barcelos Rocha
//
// Modified:     10-Nov-2015    Elias Saraiva Barroso
//               Implementation of cInpMap class. The pairs (tag|func) are
//               inserted locally where the read func is implemented.
// -------------------------------------------------------------------------

#include <iostream>
using namespace std;

#include "input.h"
#include "optalg.h"
#include "stdga.h"
#include "modnsgaII.h"
#include "modlamnsgaII.h"
#include "stdpso.h"
#include "modpso.h"
#include "stdabc.h"
#include "stdais.h"
#include "lamga.h"
#include "metaopt.h"
#include "metaprob.h"
#include "sel.h"
#include "individual.h"
#include "penalty.h"
#include "problem.h"
#include "lam.h"
#include "lamplt.h"
#include "material.h"
#include "utl.h"
#include "gblvar.h"

using namespace std;

// -------------------------------------------------------------------------
// Public functions:
//

// ============================== cInpMap ==================================

cInpMap :: cInpMap(void)
{
  Feedback = true;
}

// ============================== ~cInpMap =================================

cInpMap :: ~cInpMap(void)
{
}

// ============================== GetFunc ==================================

cAbsReadEntry* cInpMap :: GetFunc(string label)
{ 
  if (Map.find(label) != Map.end( ))
    return Map[label];
  else
    if (Feedback)
      cout << "This Label: " + label+ " dont have any associated function.\n";

  return 0;
}

// ============================== Insert ===================================

bool cInpMap:: Insert(string label, cAbsReadEntry *func)
{
  if (Map.find(label) == Map.end( ))
  {
    pair<string,cAbsReadEntry*> TagFunc(label,func);
    Map.insert(TagFunc);
    return true;
  }
  else
  {
    if (Feedback)
      cout << "Label " + label+ " already added in input map.";
    return false;
  }
}

// ============================== ReadFile =================================

void ReadNeutralFile(cInpMap &Map, ifstream &in)
{
  char label[200];
  cAbsReadEntry *func;

  while (1)
  {
    // Read the next label

    if (!Utl::NextLabel(in, label))
    {
      cout << "Input error or label END not found!" << endl;
      exit(0);
    }

    // Check for the end of file.

    if (string(label) == "END") break;

    // Skip header tag
    
    if (string(label) == "HEADER") continue;

    // Get the input function from the given label.

    func = Map.GetFunc(label); 

    // Read the data from the input file.

    if (func) func->Read(in);
  }
}

// ============================== InpCopyData ==============================

void CopyFileData(ifstream &in, ofstream &out)
{
  // Scan the first line (ignore the label HEADER).

  char line[BUFSIZ];
  in.seekg(0, ios::beg);
  in.getline(line, BUFSIZ);
  out << "%HEADER\n";
  out << "Output file generated by BIOS 3.0.\n";

  // Copy the input file in the output file (before the %END).

  while(!in.eof())
  {
    in.getline(line,BUFSIZ);
    if (string(line) == "%END") break;
    out << line << endl;
  }
}

// ============================== CtrlMap ==================================

cInpMap&  CtrlMap(void)
{
  static cInpMap map; 
  return map;
} 

// ============================== ProbMap ==================================

cInpMap&  ProbMap(void) 
{
  static cInpMap map; 
  return map;
} 

// ============================================== End of File ==============
